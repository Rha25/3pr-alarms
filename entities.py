from excel import *

xml_file_template = """<?xml version="1.0" encoding="UTF-8" ?>
<ALARMS>%s
</ALARMS>"""

xml_alarm_template = """
<ALARM>
	<ID>%(identifier)s</ID>
	<NAME>%(name)s</NAME>
	<DESCRIPTION>%(description)s</DESCRIPTION>
	<HELP>%(help)s</HELP>
	<SERIAL>%(serial)s</SERIAL>
	<GROUP>%(group)s</GROUP>
	<CONDITION>%(condition)s</CONDITION>
	<TYPE>%(what)s</TYPE>
	<RESET>%(reset)s</RESET>
	<REGTYPE>%(regtype)s</REGTYPE>
	<PAGE>%(page)s</PAGE>
</ALARM>"""

class Alarm:
	def XML(self, lang):
		# applies all methods on class' attributes
		# so, if a sublcass wants to modify the behavior
		# it will take effect here
		self.identifier = self.get_identifier()
		self.name = self.get_name(lang)
		self.description = self.get_description(lang)
		self.help = self.get_help(lang)
		self.serial = self.get_serial()
		self.group = self.get_group()
		self.condition = self.get_condition()
		self.what = self.get_what()
		self.reset = self.get_reset()
		self.regtype = self.get_regtype()
		self.page = self.get_page()
		# return the complete XML calling class' methods
		return xml_alarm_template%self.__dict__
	def get_identifier(self):
		return self.identifier
	def get_name(self, lang):
		return value_at(self.name_row, lang)
	def get_description(self, lang):
		return value_at(self.desc_row, lang)
	def get_help(self, lang):
		return value_at(self.help_row, lang)
	def get_serial(self):
		return self.serial
	def get_group(self):
		return self.group
	def get_condition(self):
		return self.condition
	def get_what(self):
		return self.what
	def get_reset(self):
		return self.reset
	def get_regtype(self):
		return self.regtype
	def get_page(self):
		return self.page







# =================
# GENERIC
# =================
class NonserialAlarm(Alarm):
	def __init__(self, ident, name, desc, help, group, reset, what, page, cond):
		self.identifier = ident
		# from translation file...
		self.name_row = name
		self.desc_row = desc
		self.help_row = help
		# ........................
		self.serial = 'NO'
		self.group = group
		self.condition = cond
		self.what = what
		self.reset = reset
		self.regtype = 'COIL'
		self.page = page

# =================
# ECODRY
# =================
class RowAlarm(Alarm):
	def __init__(self, row, fan=-1):
		self.row = row
		self.fan = fan # only if used...
		self.group = "ECODRY ROW %d"%row
		self.condition = 'LOGIC'
		self.reset = 'AUTO' # most of the cases
	def get_name(self, lang):
		return value_at(self.name_row, lang).format(row=self.row, fan=self.fan)
	def get_description(self, lang):
		return value_at(self.desc_row, lang).format(row=self.row, fan=self.fan)
	def get_help(self, lang):
		return value_at(self.help_row, lang).format(row=self.row, fan=self.fan)
		
class Row3PRComAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_COM"%(row+8)
		self.name_row = 32
		self.desc_row = 33
		self.help_row = 34
		self.what = 'ALARM'
		self.page = 'ecodry_pid.qml'
		self.serial = 'NO'
		self.regtype = 'COIL'
	
class RowTB9ComAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "W%02d_COM"%(row+8)
		self.name_row = 29
		self.desc_row = 30
		self.help_row = 31
		self.what = 'WARNING'
		self.page = '_none_'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
	
class RowFanComAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "E%02d_COM"%(row+8)
		self.name_row = 35
		self.desc_row = 36
		self.help_row = 37
		self.what = 'WARNING'
		self.page = '_none_'
		self.serial = 'YES'
		self.regtype = 'HOLDING_REGISTER'
		
class RowFanBreakerAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_BRK"%(row+8)
		self.name_row = 38
		self.desc_row = 39
		self.help_row = 40
		self.what = 'WARNING'
		self.page = '_none_'
		self.serial = 'NO'
		self.regtype = 'COIL'

class RowFanErrorAlarm(RowAlarm):
	def __init__(self, row, fan):
		RowAlarm.__init__(self, row, fan)
		self.identifier = "W%02d_SL%d"%(row+8, fan-1)
		self.name_row = 41
		self.desc_row = 42
		self.help_row = -1
		self.what = 'WARNING'
		self.page = '_none_'
		self.serial = 'NO'
		self.regtype = 'HOLDING_REGISTER'
	def get_help(self, lang):
		return "_autogenerated_"

class RowHighTSEAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "W%02d_TSE"%(row+8)
		self.name_row = 43
		self.desc_row = 44
		self.help_row = 45
		self.what = 'WARNING'
		self.page = '_none_'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'

class RowTAEAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_TAE"%(row+8)
		self.name_row = 46
		self.desc_row = 47
		self.help_row = 48
		self.what = 'ALARM'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowTSEAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_TSE"%(row+8)
		self.name_row = 49
		self.desc_row = 50
		self.help_row = 51
		self.what = 'ALARM'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowTREAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "W%02d_TRE"%(row+8)
		self.name_row = 52
		self.desc_row = 53
		self.help_row = 54
		self.what = 'WARNING'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowPINEAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_PIE"%(row+8)
		self.name_row = 55
		self.desc_row = 56
		self.help_row = 57
		self.what = 'ALARM'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.reset = 'MANUAL'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowPOUTEAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_POE"%(row+8)
		self.name_row = 58
		self.desc_row = 59
		self.help_row = 60
		self.what = 'ALARM'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.reset = 'MANUAL'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowLTEAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_LTE"%(row+8)
		self.name_row = 61
		self.desc_row = 62
		self.help_row = 63
		self.what = 'ALARM'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowPSEAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_PSE"%(row+8)
		self.name_row = 64
		self.desc_row = 65
		self.help_row = 66
		self.what = 'ALARM'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowPBE1Alarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "W%02d_PB1"%(row+8)
		self.name_row = 67
		self.desc_row = 68
		self.help_row = 69
		self.what = 'WARNING'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowPBE2Alarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "W%02d_PB2"%(row+8)
		self.name_row = 70
		self.desc_row = 71
		self.help_row = 72
		self.what = 'WARNING'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowPBE3Alarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "W%02d_PB3"%(row+8)
		self.name_row = 73
		self.desc_row = 74
		self.help_row = 75
		self.what = 'WARNING'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowPAEAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "W%02d_PAE"%(row+8)
		self.name_row = 76
		self.desc_row = 77
		self.help_row = 78
		self.what = 'WARNING'
		self.page = 'ecodry_pid.qml'
		self.condition = 'PROBE'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
class RowBWRAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_PMP"%(row+8)
		self.name_row = 79
		self.desc_row = 80
		self.help_row = 81
		self.what = 'ALARM'
		self.page = 'ecodry_spray_page.qml'
		self.reset = 'MANUAL'
		self.serial = 'NO'
		self.regtype = 'COIL'
# =================
# SDP PUMPS
# =================
class SDPumpAlarm(Alarm):
	def __init__(self, pump):
		self.pump = pump
		self.identifier = "A05_PP%d"%(pump)
		self.name_row = 194
		self.desc_row = 195
		self.help_row = 196
		self.what = 'ALARM'
		self.condition = 'DIGITAL'
		self.group = 'CIRCUIT SDP'
		self.page = 'ecodry_selfdrain_page.qml'
		self.reset = 'MANUAL'
		self.serial = 'NO'
		self.regtype = 'COIL'
	def get_name(self, lang):
		return value_at(self.name_row, lang).format(pump=self.pump)
	def get_desc(self, lang):
		return value_at(self.desc_row, lang).format(pump=self.pump)
	def get_help(self, lang):
		return value_at(self.help_row, lang).format(pump=self.pump)
# =================
# CM from PLC
# =================
class PLCCMAlarm(Alarm):
	def __init__(self, module):
		self.module = module
		self.identifier = "PLC_CM%d"%(module)
		self.name_row = 255
		self.desc_row = 256
		self.help_row = 257
		self.what = 'ALARM'
		self.condition = 'LOGIC'
		self.group = 'PLC'
		self.page = '_none_'
		self.reset = 'MANUAL'
		self.serial = 'NO'
		self.regtype = 'COIL'
	def get_name(self, lang):
		return value_at(self.name_row, lang).format(module=self.module)
	def get_desc(self, lang):
		return value_at(self.desc_row, lang).format(module=self.module)
	def get_help(self, lang):
		return value_at(self.help_row, lang).format(module=self.module)
# =================
# CENTRAL CHILLER
# =================	
class ChillerAlarm(Alarm):
	def __init__(chiller, alarm):
		self.chiller = chiller
		self.alarm = alarm
		self.name_row = 218
		self.desc_row = 219
		self.help_row = -1
		self.identifier = "A07_C%d%d"%(self.chiller,self.alarm)
		self.reset = 'MANUAL'
		self.what = 'ALARM'
		self.regtype = 'HOLDING_REGISTER'
		self.group = 'CENTRAL CHILLER'
		self.page = 'chiller_pid.qml'
		self.serial = 'YES'
		self.condition = 'LOGIC'
	def get_name(self, lang):
		return value_at(self.name_row, lang).format(chiller=self.chiller)		
	def get_description(self):
		return value_at(self.desc_row, lang).format(chiller=self.chiller, alarm=self.alarm)
	def get_help(self, lang):
		return "_autogenerated_"
