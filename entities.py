import xlrd

def value_at(row, col):
	# TODO: return the string value at the selected row/col
	return ""
	
xml_template = """
<ALARM>
	<ID>%(identifier)s</ID>
	<NAME>%(name)s</NAME>
	<DESCRIPTION>%(description)s</DESCRIPTION>
	<HELP>%(help)s</HELP>
	<SERIAL>%(serial)s</SERIAL>
	<GROUP>%(group)s</GROUP>
	<CONDITION>%(condition)s</CONDITION>
	<TYPE>%(what)s</TYPE>
	<RESET>%(reset)s</RESET>
	<REGTYPE>%(regtype)s</REGTYPE>
	<PAGE>%(page)s</PAGE>
</ALARM>"""

class Alarm:
	def XML(self, lang):
		# applies all methods on class' attributes
		# so, if a sublcass wants to modify the behavior
		# it will take effect here
		self.identifier = self.get_identifier()
		self.name = self.get_name(lang)
		self.description = self.get_description(lang)
		self.help = self.get_help(lang)
		self.serial = self.get_serial()
		self.group = self.get_group()
		self.condition = self.get_condition()
		self.what = self.get_what()
		self.reset = self.get_reset()
		self.regtype = self.get_regtype()
		self.page = self.get_page()
		# return the complete XML calling class' methods
		return xml_template%self.__dict__
	def get_identifier(self):
		return self.identifier
	def get_name(self, lang):
		return value_at(self.name_row, lang)
	def get_description(self, lang):
		return value_at(self.desc_row, lang)
	def get_help(self, lang):
		return value_at(self.help_row, lang)
	def get_serial(self):
		return self.serial
	def get_group(self):
		return self.group
	def get_condition(self):
		return self.condition
	def get_what(self):
		return self.what
	def get_reset(self):
		return self.reset
	def get_regtype(self):
		return self.regtype
	def get_page(self):
		return self.page







# =================
# GENERIC
# =================
class NonserialAlarm(Alarm):
	def __init__(self, ident, name, desc, help, group, reset, what, page, cond):
		self.identifier = ident
		# from translation file...
		self.name_row = name
		self.desc_row = desc
		self.help_row = help
		# ........................
		self.serial = 'NO'
		self.group = group
		self.condition = cond
		self.what = what
		self.reset = reset
		self.regtype = 'COIL'
		self.page = page

# =================
# ECODRY
# =================
class RowAlarm(Alarm):
	def __init__(self, row, fan):
		self.row = row
		self.fan = fan
		self.group = "ECODRY ROW %d"%row
		
	def get_name(self, lang):
		return value_at(self.name_row, lang).format(row=self.row, fan=self.fan)
		
	def get_description(self):
		return value_at(self.desc_row, lang).format(row=self.row, fan=self.fan)
		
	def get_help(self):
		return value_at(self.help_row, lang).format(row=self.row, fan=self.fan)
		
class RowTB9ComAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "A%02d_COM"%(row+8)
		self.name_row = 29
		self.desc_row = 30
		self.help_row = 31
		self.what = 'ALARM'
		self.page = 'ecodry_pid.qml'
		self.condition = 'LOGIC'
		self.reset = 'AUTO'
		self.serial = 'NO'
		self.regtype = 'COIL'
	
class RowComAlarm(RowAlarm):
	def __init__(self, row):
		RowAlarm.__init__(self, row)
		self.identifier = "W%02d_COM"%(row+8)
		self.name_row = 29
		self.desc_row = 30
		self.help_row = 31
		self.what = 'WARNING'
		self.page = '_none_'
		self.condition = 'LOGIC'
		self.reset = 'AUTO'
		self.serial = 'NO'
		self.regtype = 'COIL'
		
	
class RowSlaveComAlarm(Alarm):
	def __init__(self, row, fan):
		RowAlarm.__init__(self, row, fan)
		self.identifier = "E%02d_COM"%(row+8)
		self.name_row = 29
		self.desc_row = 30
		self.help_row = 31
		self.what = 'WARNING'
		self.page = '_none_'
		self.condition = 'LOGIC'
		self.reset = 'AUTO'
		self.serial = 'YES'
		self.regtype = 'HOLDING_REGISTER'
	
# =================
# CENTRAL CHILLER
# =================	
class ChillerAlarm(Alarm):
	def __init__(chiller, alarm):
		self.chiller = chiller
		self.alarm = alarm
		self.name_row = 218
		self.desc_row = 219
		self.help_row = -1
		self.help = '_autogenerated_'
		self.identifier = "A07_C%d%d"%(self.chiller,self.alarm)
		self.reset = 'MANUAL'
		self.what = 'ALARM'
		self.regtype = 'HOLDING_REGISTER'
		self.group = 'CENTRAL CHILLER'
		self.page = 'chiller_pid.qml'
		self.serial = 'YES'
		self.condition = 'LOGIC'
	# specific over-written methods
	def get_name(self, lang):
		return value_at(self.name_row, lang).format(chiller=self.chiller)		
	def get_description(self):
		return value_at(self.desc_row, lang).format(chiller=self.chiller, alarm=self.alarm)
